// Generated by CoffeeScript 1.9.1
var Calendar, IndexStyle, React, Units, Utils, jss, moment, useSheet;

React = require('react');

moment = require('moment-range');

Units = require('./constants').Units;

Calendar = require('./calendar');

Utils = require('./utils');

jss = require('jss');

jss.use(require('jss-nested'));

jss.use(require('jss-camel-case'));

jss.use(require('jss-vendor-prefixer'));

jss.use(require('jss-px'));

useSheet = require('react-jss');

IndexStyle = require('./styles').IndexStyle;

module.exports = React.createClass({
  displayName: 'Kronos',
  render: function() {
    return React.createElement("div", {
      "className": this.sheet.classes.kronos
    }, React.createElement("input", {
      "type": 'text',
      "ref": 'input',
      "value": this.state.input,
      "onClick": ((function(_this) {
        return function() {
          return _this.toggle(true);
        };
      })(this)),
      "onFocus": ((function(_this) {
        return function() {
          return _this.toggle(true);
        };
      })(this)),
      "onBlur": this.onBlur,
      "onKeyDown": ((function(_this) {
        return function(e) {
          return _this.onKeyDown(e.keyCode);
        };
      })(this)),
      "onChange": this.onChange,
      "placeholder": this.props.placeholder,
      "className": this.sheet.classes.input
    }), this.state.visible && React.createElement(Calendar, {
      "datetime": this.state.datetime || moment(),
      "onSelect": this.onSelect,
      "above": ((function(_this) {
        return function(bool) {
          return _this.above = bool;
        };
      })(this)),
      "level": this.state.level,
      "setLevel": ((function(_this) {
        return function(level) {
          return _this.setState({
            level: level
          });
        };
      })(this))
    }));
  },
  getInitialState: function() {
    return {
      datetime: this.getDateTimeInput().datetime,
      input: this.getDateTimeInput().input,
      visible: false,
      level: this.getDefaultLevel()
    };
  },
  getDateTimeInput: function(props) {
    var datetime, prop;
    if (props == null) {
      props = this.props;
    }
    prop = props.date || props.time || null;
    datetime = this.parse(prop);
    return {
      datetime: datetime,
      input: datetime.format(this.format()) || null
    };
  },
  getDefaultLevel: function() {
    if (this.props.date) {
      return Units.DAY;
    } else if (this.props.time) {
      return Units.HOUR;
    } else {
      return null;
    }
  },
  format: function() {
    if (this.props.format) {
      return this.props.format;
    } else if (this.props.date) {
      return 'MM-DD-YYYY';
    } else if (this.props.time) {
      return 'h:mm a';
    } else {
      return null;
    }
  },
  mixins: [Utils, useSheet(IndexStyle)],
  propTypes: {
    date: React.PropTypes.any,
    time: React.PropTypes.any,
    min: React.PropTypes.any,
    max: React.PropTypes.any,
    format: React.PropTypes.string,
    onChange: React.PropTypes.func,
    returnAs: React.PropTypes.oneOf(['jsdate', 'moment', 'iso', 'string']),
    close: React.PropTypes.bool,
    placeholder: React.PropTypes.string,
    styles: React.PropTypes.object,
    options: React.PropTypes.object
  },
  getDefaultProps: function() {
    return {
      close: true,
      returnAs: 'iso'
    };
  },
  componentDidMount: function() {
    return moment.locale('en', {
      week: {
        dow: 1
      },
      weekdaysMin: ['M', 'T', 'W', 'T', 'F', 'S', 'S']
    });
  },
  componentWillReceiveProps: function(nextProps) {
    return this.setState({
      datetime: this.getDateTimeInput(nextProps).datetime,
      input: this.getDateTimeInput(nextProps).input
    });
  }
});
